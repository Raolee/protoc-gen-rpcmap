// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: 2pc.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TwoPhaseCommitService_Prepare_FullMethodName  = "/twophasecommit.TwoPhaseCommitService/Prepare"
	TwoPhaseCommitService_Commit_FullMethodName   = "/twophasecommit.TwoPhaseCommitService/Commit"
	TwoPhaseCommitService_Rollback_FullMethodName = "/twophasecommit.TwoPhaseCommitService/Rollback"
	TwoPhaseCommitService_Report_FullMethodName   = "/twophasecommit.TwoPhaseCommitService/Report"
)

// TwoPhaseCommitServiceClient is the client API for TwoPhaseCommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoPhaseCommitServiceClient interface {
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Rollback(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error)
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type twoPhaseCommitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoPhaseCommitServiceClient(cc grpc.ClientConnInterface) TwoPhaseCommitServiceClient {
	return &twoPhaseCommitServiceClient{cc}
}

func (c *twoPhaseCommitServiceClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, TwoPhaseCommitService_Prepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, TwoPhaseCommitService_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) Rollback(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error) {
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, TwoPhaseCommitService_Rollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, TwoPhaseCommitService_Report_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoPhaseCommitServiceServer is the server API for TwoPhaseCommitService service.
// All implementations must embed UnimplementedTwoPhaseCommitServiceServer
// for forward compatibility
type TwoPhaseCommitServiceServer interface {
	Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	Rollback(context.Context, *RollbackRequest) (*RollbackResponse, error)
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
	mustEmbedUnimplementedTwoPhaseCommitServiceServer()
}

// UnimplementedTwoPhaseCommitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTwoPhaseCommitServiceServer struct {
}

func (UnimplementedTwoPhaseCommitServiceServer) Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) Rollback(context.Context, *RollbackRequest) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) Report(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) mustEmbedUnimplementedTwoPhaseCommitServiceServer() {}

// UnsafeTwoPhaseCommitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoPhaseCommitServiceServer will
// result in compilation errors.
type UnsafeTwoPhaseCommitServiceServer interface {
	mustEmbedUnimplementedTwoPhaseCommitServiceServer()
}

func RegisterTwoPhaseCommitServiceServer(s grpc.ServiceRegistrar, srv TwoPhaseCommitServiceServer) {
	s.RegisterService(&TwoPhaseCommitService_ServiceDesc, srv)
}

func _TwoPhaseCommitService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPhaseCommitService_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPhaseCommitService_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPhaseCommitService_Rollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Rollback(ctx, req.(*RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPhaseCommitService_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoPhaseCommitService_ServiceDesc is the grpc.ServiceDesc for TwoPhaseCommitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoPhaseCommitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twophasecommit.TwoPhaseCommitService",
	HandlerType: (*TwoPhaseCommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _TwoPhaseCommitService_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _TwoPhaseCommitService_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _TwoPhaseCommitService_Rollback_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _TwoPhaseCommitService_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "2pc.proto",
}

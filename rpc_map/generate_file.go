package rpc_map

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	version = "v1.0.0"
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) error {
	filename := file.GeneratedFilenamePrefix + ".rpcmap.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-custom. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-custom v", version)
	g.P("// source: ", file.Desc.Path())
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("import (")
	g.P(`"context"`)
	g.P(`"google.golang.org/protobuf/proto"`)
	g.P(")")
	g.P()
	GenerateRPCMap(g, file)
	return nil
}

func GenerateRPCMap(g *protogen.GeneratedFile, file *protogen.File) {
	for _, svc := range file.Services {
		g.P(fmt.Sprintf("var RPCMap = map[string]func(context.Context, %sServer, proto.Message) (proto.Message, error){", svc.GoName))
		for _, method := range svc.Methods {
			generateFunctionWrapper(g, svc, method)
		}
	}

	g.P("}")
}

func generateFunctionWrapper(g *protogen.GeneratedFile, svc *protogen.Service, method *protogen.Method) {
	inputMsgName := fmt.Sprintf(`"%s"`, method.Input.Desc.FullName())
	rpcLinkCode1 := fmt.Sprintf("func(ctx context.Context, s %sServer, req proto.Message) (proto.Message, error) {", svc.GoName)
	g.P(inputMsgName, ":", rpcLinkCode1)

	rpcLinkCode2 := fmt.Sprintf("msg, _ := req.(*%s)", g.QualifiedGoIdent(method.Input.GoIdent))
	g.P(rpcLinkCode2)
	rpcLinkCode3 := fmt.Sprintf("return s.%s(ctx, msg)", method.GoName)
	g.P(rpcLinkCode3)
	g.P("},")
}

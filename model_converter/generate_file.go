package model_converter

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"log"
)

const (
	version = "v1.0.0"
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) error {
	filename := file.GeneratedFilenamePrefix + ".struct.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-model-converter. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-custom v", version)
	g.P("// source: ", file.Desc.Path())
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("import (")
	g.P(`"context"`)
	g.P(`"google.golang.org/protobuf/proto"`)
	g.P(")")
	g.P()
	GenerateConvertAnonymousStruct(g, file)
	return nil
}

func GenerateConvertAnonymousStruct(g *protogen.GeneratedFile, file *protogen.File) {
	type AnonymousField struct {
		GoName, GoType     string
		JsonName, BsonName string
	}

	for _, message := range file.Messages {
		g.P("func (x *", message.GoIdent, ") ConvertToAnonymousStruct() struct {")

		anonymousFields := make([]AnonymousField, len(message.Fields))

		for j, field := range message.Fields {
			var goType string
			switch field.Desc.Kind() {
			// 기본 타입 처리
			case protoreflect.BoolKind, protoreflect.Int32Kind, protoreflect.Int64Kind,
				protoreflect.Uint32Kind, protoreflect.Uint64Kind, protoreflect.Sint32Kind,
				protoreflect.Sint64Kind, protoreflect.Fixed32Kind, protoreflect.Fixed64Kind,
				protoreflect.Sfixed32Kind, protoreflect.Sfixed64Kind, protoreflect.FloatKind,
				protoreflect.DoubleKind, protoreflect.StringKind, protoreflect.BytesKind:
				if field.Desc.HasOptionalKeyword() {
					goType = "*" + field.Desc.Kind().String()
				} else {
					goType = field.Desc.Kind().String()
				}

			// 메시지 및 그룹 타입 처리
			case protoreflect.MessageKind, protoreflect.GroupKind:
				if field.Desc.IsList() {
					goType = "[]" + string(field.Desc.Message().Name()) // 리스트 메시지 타입
				} else if field.Desc.IsMap() {
					// 맵 타입 처리
					keyType := field.Desc.MapKey().Kind().String()
					valueType := string(field.Desc.MapValue().Message().Name())
					goType = fmt.Sprintf("map[%s]%s", keyType, valueType)
				} else {
					goType = string(field.Desc.Message().Name()) // 단일 메시지 타입
				}

			// 열거 타입 처리
			case protoreflect.EnumKind:
				log.Println(field.GoIdent.GoName)
				log.Println(field.Desc.Enum().Parent().Name())
				log.Println(field.Desc.Enum().Name())
				log.Println(field.Desc.Enum().FullName())
				goType = string(field.GoIdent.GoName)
			}

			// JSON 및 BSON 태그 추가
			var jsonName string
			if field.Desc.HasJSONName() {
				jsonName = field.Desc.JSONName()
			} else {
				jsonName = string(field.Desc.Name())
			}

			anonymousFields[j] = AnonymousField{
				GoName:   field.GoName,
				GoType:   goType,
				JsonName: jsonName,
				BsonName: jsonName,
			}
		}

		// TODO: oneof 처리 로직 추가

		for _, af := range anonymousFields {
			g.P(af.GoName, " ", af.GoType, " `json:\"", af.JsonName, "\" bson:\"", af.JsonName, "\"`")
		}

		g.P("} {")
		g.P("return struct {")
		for _, af := range anonymousFields {
			g.P(af.GoName, " ", af.GoType, " `json:\"", af.JsonName, "\" bson:\"", af.JsonName, "\"`")
		}
		g.P("}{")
		for _, field := range message.Fields {
			g.P(field.GoName, ": x.", field.GoName, ",")
		}
		g.P("}")
		g.P("}")
		g.P()
	}
}
